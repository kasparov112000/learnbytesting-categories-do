on:
  push:
    branches:
      - main
      - fix-build
      - fix-build2
    # paths:
    #   - 'config/**'
    #   - 'site/**'
    #   - 'Dockerfile'
    #   - '.github/workflows/**'

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install dependencies with DevDependencies
        run: npm install

      - name: Install Jest, ts-jest and Jest reporters explicitly
        run: npm install --save-dev jest ts-jest @types/jest jest-junit

      - name: Run unit tests
        run: npx jest --config=jest.config.js

      - name: Generate test coverage report
        run: npx jest --config=jest.config.js --coverage --coverageDirectory=output/coverage/jest
        
      - name: Archive test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: output/coverage/jest
          retention-days: 7

  build:
    name: Build, push, and deploy
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout master
        uses: actions/checkout@master

      - name: Update SHA
        run: echo $GITHUB_SHA > $GITHUB_WORKSPACE/helm/notes

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Setup Docker buildx for better build capabilities
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Fixed the build-push-action step
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .  # Use local context instead of Git URL
          push: true
          tags: kasparov112000/learnbytesting-categories-do:latest
          # Pass GitHub token as a secret but using proper format
          secrets: |
            "GIT_AUTH_TOKEN=${{ secrets.MYTOKEN }}"

      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 3b23a2dd-3391-4d1a-a478-e2a5564de99c

      # Diagnostic logging before Helm deployment
      - name: Pre-deployment diagnostics
        run: |
          echo "=== Kubernetes Cluster Info ==="
          kubectl cluster-info
          
          echo "=== Nodes Status ==="
          kubectl get nodes -o wide
          
          echo "=== Current Deployments ==="
          kubectl get deployments -o wide
          
          echo "=== Pods Status ==="
          kubectl get pods -o wide
          
          echo "=== Events (last 5 minutes) ==="
          kubectl get events --sort-by='.lastTimestamp' | tail -20
          
          echo "=== Helm Releases ==="
          helm list -A

      - name: Prep helm chart
        run: |
          echo "=== Chart.yaml before modification ==="
          cat ./helm/Chart.yaml
          
          mv ./helm/Chart.yaml ./helm/Chart.old.yaml &&
          cat ./helm/Chart.old.yaml | grep -v appVersion > ./helm/Chart.yaml &&
          echo -e "\r\nappVersion: v${GITHUB_REF##*/}\r\n" >> ./helm/Chart.yaml
          
          echo "=== Chart.yaml after modification ==="
          cat ./helm/Chart.yaml
          
          echo "=== Contents of values.yaml ==="
          cat ./helm/values.yaml
      
      # Verify other Helm-related files
      - name: Check Helm templates
        run: |
          echo "=== List of template files ==="
          find ./helm/templates -type f | sort
          
          echo "=== Validating helm chart ==="
          helm lint ./helm/
          
          echo "=== Dry run of helm upgrade ==="
          helm upgrade --dry-run categories ./helm/ --install --set=app.name=categories --values=./helm/values.yaml
      
      # Actual deployment with increased timeout
      - name: Deploy
        uses: WyriHaximus/github-action-helm3@v3
        with:
          exec: helm upgrade categories ./helm/ --install --wait --atomic --timeout 15m --set=app.name=categories --values=./helm/values.yaml --debug
          kubeconfig: '${{ secrets.KUBECONFIG }}'
      
      # Restart the deployment to ensure all pods are using the new image
      - name: Restart Deployment
        run: |
          echo "=== Restarting deployment ==="
          kubectl rollout restart deployment/categories
          echo "=== Waiting for rollout to complete ==="
          kubectl rollout status deployment/categories --timeout=5m
      
      # Diagnostic logging after Helm attempt
      - name: Post-deployment diagnostics
        if: always()  # Run even if previous step failed
        run: |
          echo "=== Helm Release Status ==="
          helm status categories || echo "Release not found"
          
          echo "=== Updated Deployments ==="
          kubectl get deployments -o wide
          
          echo "=== Updated Pods ==="
          kubectl get pods -o wide
          
          echo "=== Recent Events ==="
          kubectl get events --sort-by='.lastTimestamp' | tail -20
          
          echo "=== Pod Logs (if available) ==="
          POD=$(kubectl get pods -l app=categories -o jsonpath="{.items[0].metadata.name}" 2>/dev/null) || echo "No pods found"
          if [ -n "$POD" ]; then
            kubectl logs $POD --tail=50 || echo "Could not get logs"
            echo "=== Pod Description ==="
            kubectl describe pod $POD || echo "Could not describe pod"
          fi