on: 
  push:
    branches:
      - main
    # paths:
    #   - 'config/**'
    #   - 'site/**'
    #   - 'Dockerfile'
    #   - '.github/workflows/**'

jobs:

  build:
    name: Build, push, and deploy
    runs-on: ubuntu-latest
    steps:

    - name: Checkout master
      uses: actions/checkout@master

    - name: Update SHA
      run: echo $GITHUB_SHA > $GITHUB_WORKSPACE/helm/notes

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Generate a unique tag using SHA
    - name: Set up Docker tag with SHA
      id: docker_tag
      run: echo "TAG=kasparov112000/learnbytesting-categories-do:${GITHUB_SHA::8}" >> $GITHUB_ENV

    - name: Build and push with unique tag
      id: docker_build
      uses: docker/build-push-action@v2
      with:
          push: true
          tags: ${{ env.TAG }}
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.GIT_AUTH_TOKEN }}

    - name: Save DigitalOcean kubeconfig with short-lived credentials
      run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 3b23a2dd-3391-4d1a-a478-e2a5564de99c
    
    - name: Prep helm chart
      run: |
          mv ./helm/Chart.yaml ./helm/Chart.old.yaml &&
          cat ./helm/Chart.old.yaml | grep -v appVersion > ./helm/Chart.yaml &&
          echo -e "\r\nappVersion: v${GITHUB_REF##*/}\r\n" >> ./helm/Chart.yaml &&
          cat ./helm/Chart.yaml

    - name: Deploy with updated image
      uses: WyriHaximus/github-action-helm3@v2
      with:
          exec: helm upgrade categories ./helm/ --install --timeout 10m --wait --set=app.name=categories --set=image.tag=${GITHUB_SHA::8} --values=./helm/values.yaml
          kubeconfig: '${{ secrets.KUBECONFIG }}'

    # Get kubectl access for debugging and restart
    - name: Setup kubectl
      run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 3b23a2dd-3391-4d1a-a478-e2a5564de99c

    # Force a rollout restart and verify
    - name: Force rollout restart and monitor
      run: |
        kubectl get pods -l app=categories -o wide
        kubectl rollout restart deployment/categories
        # Wait for the rollout to complete with a timeout
        kubectl rollout status deployment/categories --timeout=5m