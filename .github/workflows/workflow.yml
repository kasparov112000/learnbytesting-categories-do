name: Deploy to Kubernetes

on:
  repository_dispatch:
    types: [deploy-categories]
  workflow_dispatch:
    inputs:
      sha:
        description: 'Git SHA to deploy'
        required: true
        default: 'latest'

jobs:
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    steps:
      - name: Get deployment parameters
        id: params
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "SHA=${{ github.event.client_payload.sha }}" >> $GITHUB_OUTPUT
          else
            echo "SHA=${{ github.event.inputs.sha }}" >> $GITHUB_OUTPUT
          fi
          
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
      - name: Set up kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 1800 3b23a2dd-3391-4d1a-a478-e2a5564de99c
      
      - name: Check cluster status
        run: kubectl get nodes
        
      # Direct deployment update - simplest approach
      - name: Update deployment image
        run: |
          # Set image tag to use
          TAG="${{ steps.params.outputs.SHA }}"
          if [ "$TAG" = "latest" ]; then
            IMAGE="kasparov112000/learnbytesting-categories-do:latest"
          else
            IMAGE="kasparov112000/learnbytesting-categories-do:$TAG"
          fi
          
          echo "Updating deployment to use image: $IMAGE"
          
          # Update the image
          kubectl set image deployment/categories categories=$IMAGE
          
          # Wait a bit to see if pods start updating
          echo "Waiting to see if deployment starts..."
          sleep 10
          
      # Add timestamp annotation to force restart if needed
      - name: Force rollout if needed
        run: |
          # Check if pods are already updating
          UPDATING=$(kubectl get pods -l app=categories -o json | grep "Pending\|ContainerCreating" || echo "")
          if [ -z "$UPDATING" ]; then
            echo "No pods updating, forcing restart with timestamp annotation..."
            TIMESTAMP=$(date +%s)
            kubectl patch deployment categories -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"kubectl.kubernetes.io/restartedAt\":\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}}}}}"
          else
            echo "Pods already updating, no need to force restart"
          fi
          
      # Wait for deployment to complete
      - name: Wait for rollout to complete
        run: |
          kubectl rollout status deployment/categories --timeout=2m
          echo "Current pod status:"
          kubectl get pods -l app=categories -o wide